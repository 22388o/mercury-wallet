// wallet recovery from server

import { BIP32Interface, Network, TransactionBuilder, crypto as crypto_btc, script, Transaction } from 'bitcoinjs-lib';

import { Wallet } from './wallet';
import { BACKUP_STATUS, StateCoin } from './statecoin';

let bitcoin = require('bitcoinjs-lib')

export interface RecoveryRequest {
    key: string,
    sig: string,
}



// bamboo grass grant typical orange cry excite rate air state guilt pull
// Gen proof key. Address: tb1qgl76l9gg9qrgv9e9unsxq40dee5gvue0z2uxe2. Proof key: 03b2483ab9bea9843bd9bfb941e8c86c1308e77aa95fccd0e63c2874c0e3ead3f5
export const getAllStatecoinDataForWallet = async (wallet: Wallet) => {
  // rm coins from wallet storage
  wallet.account.coins = [];

  let recovery_datas = await wallet.recoverCoins();

  let recovery_data = recovery_datas[0];
  console.log("recovery_data: ", recovery_data)

  let priv_key = wallet.getBIP32forProofKeyPubKey(recovery_data.proof_key).privateKey!.toString("hex")
  console.log("priv_key: ", priv_key)

  let tx_backup = bitcoin.Transaction.fromHex(recovery_data.tx_hex);
  console.log("tx_backup: ", tx_backup)

  console.log("shared key public: ", recovery_data.shared_key_data)

  let master_key = {
    chain_code: [0,[]],
    private: {
      x2: priv_key
    },
    public: {
			q: {
				x: "836ce870adc409fd5dde1be2935fdd79bd49650a82230a32a14e1363ab659c1d",
				y: "5fd717e9a5acc20d2369d2d8275bbb5cdd1b92d70f54f59a22d2bc0f2423a0bc"
			},
      p2: {
        x: "b2483ab9bea9843bd9bfb941e8c86c1308e77aa95fccd0e63c2874c0e3ead3f5",
        y: "f5d76a4bc3605ae2e86312ceaf0242a285f3ca3d8711ab55a0e0a940e315ccd3"
      },
      p1: {
        x: "46dbc76f87053ca7d67976190ffb754f238d59662c173d82e369604d2c6117b",
        y: "24fe8de6c8982a16a6ed5c77464fdc041527c096f69119a688dc517fd83bb280"
      },
      paillier_pub: {
        n: "16450172521216470639210893803443229243642656500725470398106139070928230308783318961841891421810508864257162236818599047062404572263549906369602884442532399022332191693955226856880076270953706569425299749098903988209962468832657498136233458226546786846183470693482846564963682829057084074559900162242848777877568682158931894299661547748071936864214324616851206953685868503996808897083207130664562737161599970002141533431026994322854661478007747531822662449078210789033796832444474074504735849854293126403819749793194578625271477675914470181510708662733815451360434989334422778993935735444601393505029796748147665341133"
      },
      c_key: [1,
        [
          2660386353, 553401718, 2053850584, 715709524, 1444295450, 733858472, 3278517844, 3026332315, 3997981583, 1602871327, 2840045069, 1072277099, 2349670647, 1653058321, 3919894408, 3898393516, 3165738146, 2528234044, 3796714191, 1581029338, 1261337080, 799643975, 3855071873, 2422657377, 2492020614, 1738930038, 1818512325, 1245679515, 2376621267, 1198299749, 2547938016, 3919419303, 2745710697, 2293520791, 2016974647, 1469970391, 418807227, 3816687026, 3667020830, 3353266276, 2865098714, 1594314817, 1341674881, 3481853729, 3004915862, 1682673922, 1889489065, 1616209820, 2914868514, 632006103, 1884393371, 532521398, 88023442, 1773355906, 1550630678, 570247949, 3299948571, 595434879, 3894183233, 1138599348, 2112788015, 3335162903, 3710970372, 2506681158, 1024425681, 3488440270, 19229041, 3108758848, 402796426, 2870054504, 4170127586, 2614217520, 1742034180, 3909725634, 2913974428, 2556937989, 3652186022, 533316714, 2734793186, 459052461, 4233875930, 2808888764, 3103450572, 1894882554, 4000616368, 3490254568, 2196434632, 3724479703, 1166843443, 2448797240, 990784110, 451260369, 1720683861, 1458314335, 94162247, 2458198580, 4246520818, 769273462, 1638240391, 2183779007, 3036313518, 3285055473, 2754926758, 2009514894, 4293978516, 397794923, 2138907652, 1260727368, 2178999560, 2663668718, 2471647647, 3871949467, 668650636, 3538577431, 1112329462, 4219896184, 3193444364, 654136038, 4116999294, 2118386042, 3586306739, 4158326508, 170356353, 1121333448, 3342447696, 2582990178, 3726106223, 955088160
        ]
      ]
    }
  }

  let statecoin = new StateCoin(recovery_data.shared_key_id, master_key)

  statecoin.proof_key = recovery_data.proof_key
  statecoin.tx_backup = tx_backup;
  statecoin.backup_status = BACKUP_STATUS.CONFIRMED;
  statecoin.funding_vout = tx_backup.ins[0].index;
  statecoin.funding_txid = tx_backup.ins[0].hash.reverse().toString("hex");
  statecoin.statechain_id = recovery_data.statechain_id;

  // Get locktime and amount
  statecoin.value = recovery_data.amount;

  statecoin.setConfirmed();
  console.log("statecoin added: ", statecoin);
  wallet.statecoins.addCoin(statecoin);

  // wallet.saveStateCoinsList();
}
